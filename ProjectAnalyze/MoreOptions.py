import pandas as pd
import xlrd
# more options for reading files using pandas
def meu_switch():
    validacao = True

    while validacao:
        z = int(input("Menu : "
                      "\n 1 : Open file in Json "
                      "\n 2 : Open file in Json Pandas "
                      "\n 3 : Open file TXT"
                      "\n 4 : Open file generated by excel"
                      "\n 5 : Open html file"
                      "\n 6 : Open web table"
                      "\n 7 : Series and DataFrame"
                      "\n 8 :Organizing DataFrames"
                      "\n 9 :Organizing DataFrames"
                      "\n 10 : Sair \n"))
        if z == 1:
            open_json()
        elif z == 2:
            open_json_pandas()
        elif z == 3:
            openTxt()
        elif z == 4:
            openExcel()
        elif z == 5:
            webForm()
        elif z == 6:
            webForms3()
        elif z == 7:
            series()
        elif z == 8:
            organizing_dataFrames()
        elif z == 9:
            exercises()
        elif z == 10:
            print("Programa encerrado")
            break
        else:
            print("opcao inválida")

def open_json():
    json = open('C:/Users/Damaris-PC/AnalyzeProperties/Extras/data/aluguel.json')
    print(json.read())

def open_json_pandas():
    df_json = pd.read_json('C:/Users/Damaris-PC/AnalyzeProperties/Extras/data/aluguel.json')
    print(df_json)

def openTxt():

    txt = open('C:/Users/Damaris-PC/AnalyzeProperties/Extras/data/aluguel.txt')
    print(txt.read())

    df_txt = pd.read_table('C:/Users/Damaris-PC/AnalyzeProperties/Extras/data/aluguel.txt')
    print(df_txt)

def openExcel():
    df_xlsx = pd.read_excel('C:/Users/Damaris-PC/AnalyzeProperties/Extras/data/aluguel.xlsx')
    print(df_xlsx)

def webForm():
    df_html = pd.read_html('C:/Users/Damaris-PC/AnalyzeProperties/Extras/data/dados_html_1.html')
    print(df_html[0])

    # web address
    df_html = pd.read_html('https://unafiscosaude.org.br/site/tabelas-de-precos-dos-planos-ativos-para-comercializacao/')
    print(df_html[0])

def webForms3():
    df_html = pd.read_html('https://www.federalreserve.gov/releases/h3/current/default.htm')
    print(len(df_html))
# select tables to read
    print(df_html[0])
    print(df_html[1])
    print(df_html[2])
def series():
    data = [1, 2, 3, 4, 5]
    s = pd.Series(data)
    print(s)

    index = ['Linha' + str(i) for i in range(5)]
    s = pd.Series(data=data, index=index)
    print(s)

    # Uma outra maneira é criar um dicionário e passá-lo para pd.Series
    data = {'Linha' + str(i): i + 1 for i in range(5)}
    s = pd.Series(data)
    s1 = s + 2
    s2 =  s + s1
    print(s1)
    print(s2)
    # Dataframe
    # usando lista
    data = [[1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]]

    df1 = pd.DataFrame(data=data)
    print(df1)

    # criando rotulos para o dataframe
    index = ['Linha' + str(i) for i in range(3)]
    df1 = pd.DataFrame(data=data, index=index)
    print(df1)
    # Criando as colunas para o dataframe
    columns = ['Coluna' + str(i) for i in range(3)]

    # usando dicionário
    #data = {'Coluna0': {'Linha0': 1, 'Linha1': 4, 'Linha2': 7},
            #'Coluna1': {'Linha0': 2, 'Linha1': 5, 'Linha2': 8},
            #'Coluna2': {'Linha0': 3, 'Linha1': 6, 'Linha2': 9}}
    #print(data)

    #usando em vez de lista tuplas
    data = [(1, 2, 3),
            (4, 5, 6),
            (7, 8, 9)]
    # criando o dataframe com rotulo(index) e colunas(colums)
    df2 = pd.DataFrame(data=data, index=index, columns=columns)
    df1 = pd.DataFrame(data=data, index=index, columns=columns)
    df3 = pd.DataFrame(data=data, index=index, columns=columns)
    #concatenar DataFrames
    df1[df1 > 0] = 'A'
    df2[df2 > 0] = 'B'
    df3[df3 > 0] = 'C'

    print(df1)
    df4 = pd.concat([df1, df2, df3])
    print(df4)
    # juntar por linhas usando o axis
    df4 = pd.concat([df1, df2, df3], axis=1)
    print(df4)
def organizing_dataFrames():
    data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    list('321')
    df = pd.DataFrame(data, list('321'), list('ZYX'))
    print(df)

    # Usando sort_index que organiza o DataFrame pelo índice das linhas
    df.sort_index(inplace=True)
    # Usando sort_index que organiza o DataFrame pelo índice das linhas e colunas usando o axis=1
    df.sort_index(inplace=True, axis=1)
    # Podemos passar um paramentro para organizacao, 1 ou mais de um no caso aqui x,
    # O índice foi invertido, com base na organização da variável X
    df.sort_values(by='X', inplace=True)
    print(df)
    df.sort_values(by=['X', 'Y'], inplace=True)
    print(df)
    #Reorganizaremos o Dataframe tomando como referência as colunas. Adicionaremos o termo axis = 1 e especificaremos a linha 3.
    df.sort_values(by='3', axis=1, inplace=True)
    print(df)

def exercises():
    alunos = pd.DataFrame({'Nome': ['Ary', 'Cátia', 'Denis', 'Beto', 'Bruna', 'Dara', 'Carlos', 'Alice'],
                           'Sexo': ['M', 'F', 'M', 'M', 'F', 'F', 'M', 'F'],
                           'Idade': [15, 27, 56, 32, 42, 21, 19, 35],
                           'Notas': [7.5, 2.5, 5.0, 10, 8.2, 7, 6, 5.6],
                           'Aprovado': [True, False, False, True, True, True, False, False]},
                          columns=['Nome', 'Idade', 'Sexo', 'Notas', 'Aprovado'])

    print(alunos)
    selecao = alunos['Aprovado'] == True
    print(alunos[selecao])
    print('Alunos {} aprovados '.format(alunos[selecao].shape[0]))

    selecao = (alunos.Aprovado == True) & (alunos.Sexo == 'F')
    print(alunos[selecao])
    print('Alunas {} aprovados '.format(alunos[selecao].shape[0]))

    selecao = (alunos.Idade > 10) & (alunos.Idade < 20) | (alunos.Idade >= 40)
    print(alunos[selecao])
    print('Alunos {} entre 10 a 20 anos e alunos maior que 40 anos '.format(alunos[selecao].shape[0]))
    # Metodo loc ele faz a selecao pelas linhas, ate agora usamos pela coluna
    print(alunos.loc[2])
    # Metodo loc ele faz a selecao da linha e coluna me dando um valor
    print('Idade do Denis {}'.format(alunos.loc[2,'Idade']))
    # iloc[] , que utiliza os índices numéricos
    print('Idade do Denis {}'.format(alunos.iloc[2,1]))
    
    print(alunos.loc[[2, 3], ['Nome','Idade']])
    print(alunos.iloc[[2,3],[0,1]])
if __name__ == "__main__":
    print(meu_switch())